number = 73167176531330624919225119674426574742355349194934969835203127745063262395783180169848018694788518438586156078911294949545950173795833195285320880551112540698747158523863050715693290963295227443043557668966489504452445231617318564030987111217223831136222989342338030813533627661428280644448664523874930358907296290491560440772390713810515859307960866701724271218839987979087922749219016997208880937766572733300105336788122023542180975125454059475224352584907711670556013604839586446706324415722155393697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450

digits :: Integer -> [Int]
digits n = map (\x -> read [x] :: Int) (show n)

movprod :: [Int] -> Int -> Int -> Int
movprod l starting_point num_to_consider = product (take num_to_consider (drop starting_point l))

main = do
  let list_of_digits = digits number
  print(maximum (map (\x -> movprod list_of_digits x 13) [0,1..988]))
